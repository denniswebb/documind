name: Release Automation

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'
      - '.github/**.md'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    environment:
      name: release
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: write
      actions: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release commit
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          if echo "$COMMIT_MSG" | grep -E "(chore\(release\)|Release v|\[skip ci\])"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping release - this appears to be a release commit: $COMMIT_MSG"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with release for commit: $COMMIT_MSG"
          fi

      - name: Setup Node.js
        if: steps.check_commit.outputs.skip == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Create release with semver action
        if: steps.check_commit.outputs.skip == 'false'
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main
          patchList: fix,bugfix,perf,refactor,test,tests,doc,docs,chore
          minorList: feat,feature
          majorList: ${{ github.event.inputs.version_bump == 'major' && 'major,breaking,any' || 'major,breaking' }}
          patchAll: ${{ github.event.inputs.version_bump == 'patch' }}
          noVersionBumpBehavior: patch
          prefix: "v"

      - name: Update package.json and create tag
        id: release_step
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != ''
        run: |
          TAG_VERSION="${{ steps.semver.outputs.nextStrict }}"
          # Remove v prefix to get clean version for package.json
          CLEAN_VERSION=${TAG_VERSION#v}

          echo "🚀 Releasing version: $CLEAN_VERSION (tag: $TAG_VERSION)"

          # Check if tag already exists
          if git rev-parse "refs/tags/$TAG_VERSION" >/dev/null 2>&1; then
            echo "⚠️  Tag $TAG_VERSION already exists, skipping release"
            echo "skipped=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "skipped=false" >> $GITHUB_OUTPUT

          # Check if version already matches
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" = "$CLEAN_VERSION" ]; then
            echo "✅ Version already at $CLEAN_VERSION, skipping package.json update"
          else
            echo "📦 Updating package.json from $CURRENT_VERSION to $CLEAN_VERSION"
            npm version $CLEAN_VERSION --no-git-tag-version
          fi

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create commit if there are changes
          if git diff --quiet; then
            echo "📝 No package.json changes to commit"
          else
            git add package.json
            git commit -m "[skip ci] chore(release): v$CLEAN_VERSION"
          fi

          # Create and push tag
          git tag "$TAG_VERSION"
          git push origin main
          git push origin "$TAG_VERSION"

          echo "✅ Version $CLEAN_VERSION released and tagged as $TAG_VERSION"

      - name: Create release package
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        run: |
          TAG_VERSION="${{ steps.semver.outputs.nextStrict }}"
          # Remove v prefix for version number
          NEW_VERSION=${TAG_VERSION#v}

          # Create release directory
          mkdir -p release/documind-v${NEW_VERSION}

          # Copy files needed for installer to work
          cp -r src/ release/documind-v${NEW_VERSION}/src/
          cp install.js release/documind-v${NEW_VERSION}/
          cp package.json release/documind-v${NEW_VERSION}/
          cp README.md release/documind-v${NEW_VERSION}/

          # Create installation instructions
          cat > release/documind-v${NEW_VERSION}/INSTALL.md << 'EOF'
          # DocuMind Installation

          ## Automated Installation (Recommended)

          ```bash
          # Extract and install
          unzip documind-v${NEW_VERSION}.zip
          cd documind-v${NEW_VERSION}
          node install.js init [target-directory]
          ```

          ## Manual Installation

          ```bash
          # Extract to your project root
          unzip documind-v${NEW_VERSION}.zip -d your-project/
          cd your-project/documind-v${NEW_VERSION}
          node install.js init ../
          ```

          ## What's Included

          - Complete DocuMind source system
          - Automated installer
          - Support for Claude, Copilot, Cursor, and Gemini
          - Documentation templates

          ## Getting Started

          After installation, try:
          - `/document bootstrap` - Generate complete documentation
          - `/document [your question]` - Ask anything about your code
          EOF

          # Create ZIP archive
          cd release
          zip -r documind-v${NEW_VERSION}.zip documind-v${NEW_VERSION}/

          echo "RELEASE_FILE=release/documind-v${NEW_VERSION}.zip" >> $GITHUB_ENV
          echo "VERSION=${TAG_VERSION}" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        run: |
          TAG_VERSION="${{ env.VERSION }}"
          # Remove v prefix for display version
          DISPLAY_VERSION=${TAG_VERSION#v}

          # Generate changelog from recent commits
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"- %s")
          else
            CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
          fi

          # Create release with ZIP attachment
          gh release create "$TAG_VERSION" \
            "${{ env.RELEASE_FILE }}" \
            --title "DocuMind v$DISPLAY_VERSION" \
            --notes "## DocuMind v$DISPLAY_VERSION

          ### Installation

          Download \`documind-v$DISPLAY_VERSION.zip\` and run:
          \`\`\`bash
          unzip documind-v$DISPLAY_VERSION.zip
          cd documind-v$DISPLAY_VERSION
          node install.js init [your-project-directory]
          \`\`\`

          ### Changes

          $CHANGELOG

          ### What's New
          - Complete DocuMind documentation system
          - AI tool integrations (Claude, Copilot, Cursor, Gemini)
          - Automated installation and updates
          - Natural language documentation commands" \
            --latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for npm publish
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Extract package info
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        id: pkg
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")

          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          echo "📦 Package: $PACKAGE_NAME v$VERSION"
          echo "✅ Publishing version from package.json"

      - name: Install dependencies
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        run: npm ci

      - name: Run tests
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        run: npm test

      - name: Verify package contents (dry-run)
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        run: |
          echo "🔍 Verifying package contents before publishing..."
          npm publish --dry-run
          echo "✅ Dry-run completed successfully. Package is ready for publishing."
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        id: publish
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify npm publish success
        if: success() && steps.publish.outcome == 'success'
        run: |
          echo "🎉 Successfully published ${{ steps.pkg.outputs.name }} v${{ steps.pkg.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "📦 Package: https://www.npmjs.com/package/${{ steps.pkg.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Registry: https://registry.npmjs.org/${{ steps.pkg.outputs.name }}" >> $GITHUB_STEP_SUMMARY

      - name: Setup Pages
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        uses: actions/configure-pages@v4

      - name: Upload docs artifact
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: Deploy to GitHub Pages
        if: steps.check_commit.outputs.skip == 'false' && steps.semver.outputs.nextStrict != '' && steps.release_step.outputs.skipped != 'true'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify docs publish success
        if: success() && steps.deployment.outcome == 'success'
        run: |
          echo "📚 Successfully published documentation to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Documentation: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY